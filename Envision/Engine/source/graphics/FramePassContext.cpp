#include "envision/envpch.h"
#include "envision/core/GPU.h"
#include "envision/graphics/FramePassContext.h"

env::FramePassContext::FramePassContext(ID3D12Device* device, D3D12_COMMAND_LIST_TYPE type) :
	m_resourceDescriptorAllocator(device, D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV),
	m_samplerDescriptorAllocator(device, D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER),
	m_renderTargetDescriptorAllocator(device, D3D12_DESCRIPTOR_HEAP_TYPE_RTV),
	m_depthStencilDescriptorAllocator(device, D3D12_DESCRIPTOR_HEAP_TYPE_DSV)
{
	m_commandList = GPU::CreateCommandList("AutoGenerated", type);
}

env::FramePassContext::~FramePassContext()
{
	delete m_commandList;
}

env::CommandList* env::FramePassContext::GetCommandList()
{
	return m_commandList;
}

env::CopyList* env::FramePassContext::GetCopyList()
{
	CopyList* typedList = dynamic_cast<CopyList*>(m_commandList);
	assert(typedList && "The command list wasn't created as a copy list!");
	return typedList;
}

env::ComputeList* env::FramePassContext::GetComputeList()
{
	ComputeList* typedList = dynamic_cast<ComputeList*>(m_commandList);
	assert(typedList && "The command list wasn't created as a compute list!");
	return typedList;
}

env::DirectList* env::FramePassContext::GetDirectList()
{
	DirectList* typedList = dynamic_cast<DirectList*>(m_commandList);
	assert(typedList && "The command list wasn't created as a direct list!");
	return typedList;
}

D3D12_CPU_DESCRIPTOR_HANDLE env::FramePassContext::Allocate_CBV_SRV_UAV(UINT count)
{
	return m_resourceDescriptorAllocator.Allocate(count);
}

D3D12_CPU_DESCRIPTOR_HANDLE env::FramePassContext::Allocate_sampler(UINT count)
{
	return m_samplerDescriptorAllocator.Allocate(count);
}

D3D12_CPU_DESCRIPTOR_HANDLE env::FramePassContext::Allocate_RTV(UINT count)
{
	return m_renderTargetDescriptorAllocator.Allocate(count);
}

D3D12_CPU_DESCRIPTOR_HANDLE env::FramePassContext::Allocate_DSV(UINT count)
{
	return m_depthStencilDescriptorAllocator.Allocate(count);
}
